/*
 * ped_image.nlg
 * NaanIDE
 *
 *     Project EDitor for images.
 *
 * column positioning:                          //                          //                      !
 *
 * Copyright (c) 2020-2024 by Richard C. Zulch
 *
 */


/*
 * peimImageEditor
 *
 *     Make an "image editor" in the specified div.
 *
 * Owner callbacks:
 *      docStatusChange(sessionKey, unsavedChanges)                         // "unsaved" status has changed
 *      docLoad(sessionKey, options, callback)                              // load content for sessionKey
 *          callback(error, { text: <content>, hash: <storage hash>})
 *      docSave(sessionKey, text, callback)                                 // save content for sessionKey
 *          callback(error, <storage hash>)
 *
 */

closure peimImageEditor(div, owner, local edimage) {
    global(js, document)
    edimage = new(object, this)
    edimage.div = div
    edimage.owner = owner                                                   // who to notify of events
    //
    // copied 2020-10-20 from https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types
    //
    edimage.extensions = {
        "apng":     "image/apng",
        "avif":     "image/avif",
        "bmp":      "image/bmp",
        "cur":      "image/x-icon",
        "gif":      "image/gif",
        "ico":      "image/x-icon",
        "img":      "image/jpeg",
        "jpeg":     "image/jpeg",
        "jpg":      "image/jpeg",
        "jfif":     "image/jpeg",
        "pjp":      "image/jpeg",
        "pjpeg":    "image/jpeg",
        "png":      "image/png",
        "svg":      "image/svg+xml",
        "tif":      "image/tiff",
        "tiff":     "image/tiff",
        "webp":     "image/webp",
    }
    
    // imageFileType
    //
    // Return the image file type for the specified filename, or false if not known.
    //
    function imageFileType(name, local dotdex, extension) {
        dotdex = name.lastIndexOf(".")
        if dotdex >= 0 {
            extension = name.slice(dotdex+1)
            edimage.extensions[extension.toLowerCase()]
        }
    }
    
    // setImage
    //
    // Set our current image to the specified base64 image, or false for none.
    //
    function setImage(session, local imageURL, image) {
        if !session {
            edimage.div.innerHTML = ""
            return
        }
        imageURL = js.w.URL.createObjectURL(xnew(js.w.Blob,
            Array(xnew(js.w.Uint8Array, session.imageData)), { type: session.imageType }))
        edimage.div.innerHTML = "<img class='nideImage_editor_img h-100'"
            "src='data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUA"
            "AAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO"
            "9TXL0Y4OHwAAAABJRU5ErkJggg==' alt='Red dot' />"
        image = edimage.div.children.0
        image.src = imageURL
        image.alt = session.name
    }

    // sessionLookup
    //
    // True iff we have an active session for the specified storeID.
    //
    edimage.sessionLookup = function sessionLookup(sessionKey) {
        !!edimage.index[sessionKey]
    }
    
    // makeSession
    //
    // Make a new empty editing session. There is initially no content and it's not yet activated.
    // The session key is a unique identifier generated by the owner. The name is the text name of
    // the session, e.g. the filename.
    
    edimage.makeSession = closure makeSession(sessionKey, name, local session) {
        session = edimage.index[sessionKey]
        if session
            return (session)                                                // no change
        session = {
            key:        sessionKey
            name:       name
            imageType:  imageFileType(name)
            //imageData -- added in updateSession
        }
        edimage.index[sessionKey] = session
        session
        
    }
        
    // activateSession
    //
    // Activate a session for the specified storeID.
    //
    edimage.activateSession = function activateSession(sessionKey, local session) {
        session = edimage.index[sessionKey]
        edimage.showSessionKey = sessionKey
        setImage(session)
    }
    
    // scrollTo
    //
    // Scroll to the specified item, obtained via search.
    //
    edimage.scrollTo = function scrollTo(item) {
        // not implemented
    }

    // updateSession
    //
    // Check for needing to load (or reload) from disk.
    //
    edimage.updateSession = closure updateSession(sessionKey, lineno, local session) {
        session = edimage.index[sessionKey]
        if session && !session.imageData {
            owner.docLoad(sessionKey, { encoding: "binary" }, function(error, content) {
                if !error {
                    session.imageData = content.binary || content.text
                    setImage(session) }
            })
        }
    }
    
    // sessionSave
    //
    // Save our session to disk.
    //
    edimage.sessionSave = function sessionSave(storeID) {
        // not implemented
    }
    
    // saveAll
    //
    // Save all pending sessions by user request.
    //
    edimage.saveAll = function saveAll() {
        // not implemented
    }
    
    // find
    //
    // Open the find panel, if applicable.
    //
    edimage.find = function find() {
        // not implemented
    }
                
    // findNext
    //
    // Open the find panel, if needed and applicable, and select the next pattern instance.
    //
    edimage.findNext = function findNext() {
        // not implemented
    }

    // navtab
    //
    // We are being shown or hidden.
    //
    edimage.navtab = function navtab(visible) {
        // not implemented
    }
    
    // cleanup
    //
    // We are going away, so clean up any resources.
    //
    edimage.cleanup = function cleanup() {
        // not implemented
    }

    // test
    //
    // True iff we know how to edit the specified storeID.
    //
    edimage.test = function test(storeID, name) {
        imageFileType(name)
    }
    
    // reset
    //
    // Reset the image editor to have no sessions or content. If a sessionKey is specified then
    // only that session is removed.
    //
    edimage.reset = function reset(sessionKey, local session) {
        if sessionKey {
            session = edimage.index[sessionKey]
            if !session
                return                                                      // specified session doesn't exist
            edimage.index[sessionKey] = undefined
            if !(edimage.showSessionKey == sessionKey)
                return }                                                    // don't touch editor if specified session not active
        else
            edimage.index = { }
        setImage()
        edimage.showSessionKey = false
    }

    // finis
    edimage.reset()
    edimage
};


/*
 * peimInit
 *
 *     Initialize the project tab component.
 *
 */

function peimInit(local manifest) {

    manifest = `(peimImageEditor, peimInit)

    Naan.module.build(module.id, "ped_image", function(modobj, compobj) {
        require("nide/nideUI/nideUI.nlg")
        compobj.manifest = manifest
        modobj.exports.MakeImageEditor = peimImageEditor
    })
} ();
